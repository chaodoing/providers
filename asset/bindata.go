package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _env_env = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x5d\x4f\x1b\x47\x14\x7d\x9f\x5f\x31\x0f\xe5\x11\xe3\x84\x88\x50\x45\x7e\x68\x31\x51\x23\x91\x2a\x42\xf0\x50\x59\x7e\x58\xdb\x03\x59\x69\xd7\x93\xce\xac\x49\xa2\xaa\x52\x68\xf9\x0a\x95\x83\x53\xe2\x1a\x4a\x42\x40\x25\xb1\xdb\xc0\xda\x91\x5a\x40\x26\x0b\x7f\xc6\x33\xb3\xfb\x2f\xaa\xd9\x59\x2f\xb0\xb6\x89\x09\x48\xd6\x48\xf7\xdc\x7b\xcf\x39\x73\xf7\xce\x9d\x8e\x3f\x20\x7f\xa0\x70\x5e\x8a\x0f\x9b\x62\xeb\x25\x2b\xed\x83\x2e\xa0\xd4\x84\x4e\x2d\x94\x47\x24\x0d\x2e\x83\x5b\xc7\x27\xfc\x75\x13\x7c\x87\xa9\x05\x13\x30\x1e\xf3\xff\x23\x18\xf1\xa1\xce\xd6\xfe\x02\x0f\x30\x91\x98\x51\x19\x66\x8b\xf3\xae\x7d\xec\x1e\xd5\xd8\xdb\xb7\xae\x7d\xe6\x55\x6c\x30\x86\x09\x85\x09\x68\x91\x02\x02\xdd\x28\xf8\x3c\x79\xe5\x1d\x3b\xab\x78\x8b\x45\xe1\xd8\xdd\x79\xe2\x59\x49\xd1\x3d\x5d\x67\xcb\x4d\xb6\xd2\xe0\x2f\xaa\x6c\xe5\x90\xad\x35\xc0\x18\xce\x53\x6c\x20\x08\xdb\x4d\xee\x40\xd7\x6e\x30\xa7\x2c\x51\x7e\x59\xfe\xc7\x72\xeb\xe4\x10\x4c\xa2\x2c\x26\x39\xe8\x03\x67\x34\x83\x4a\xa4\x02\x28\xbc\xd8\xb2\x99\x53\x06\x49\x9d\xa0\xac\x85\xc9\x53\x98\x80\x5f\xfd\x94\xbc\x37\xf9\xf3\x90\x81\x67\xe9\x15\xdc\x77\x97\xf8\xf6\x61\x3f\x0a\x62\xf7\x88\x4e\xd3\x61\x5b\x71\xf0\x5c\x34\xab\x60\x02\xcd\x21\x43\x92\xca\xa1\x4c\x61\x16\xdc\xd5\x03\x31\x3a\xd1\xe9\xe0\xc0\x0f\x83\x03\xe6\xe0\x40\x2e\x66\xe0\x59\x30\x4e\x08\x26\x32\x84\xe4\xe1\x72\xac\x37\xbd\x72\x83\x17\x6d\xd6\x5c\x57\x4d\x7b\x72\x4b\x6a\x96\x96\xd1\x28\x92\xfc\x58\xa9\x2e\x5e\xd5\xa2\x99\xe3\x79\x2d\x63\xa0\x73\x9b\x23\xf1\xa8\x1c\x3d\x3f\x83\x3b\x51\xc1\x65\x84\x2a\xcd\xa7\xf4\x47\xe3\xba\x52\xae\xb0\xf9\xa2\x8c\x10\x2f\x3e\x9e\xb0\xed\xdf\x40\x92\xe8\x73\x08\x9e\xb7\x95\xa3\x72\xb6\xcd\x5f\xbc\xbb\x38\xed\x2a\x7e\xe3\xe6\x6d\x7f\xe6\x6f\x84\x98\x8b\xd3\xae\x30\xc3\xc3\xf1\x91\x30\x1c\xf6\x02\xc9\x0c\x84\x01\x22\x95\xcb\x7c\xaf\x99\x97\xb9\x04\xd5\x5e\xd5\xf8\xca\x11\x98\xa6\x88\xe4\x35\x53\x9a\x9a\x6a\x9f\x2f\x33\xf7\x71\x2a\x87\xd5\x97\xc4\xce\x3c\x78\xa0\x51\xfa\x58\x4e\x72\x02\xa6\xda\xe7\x2e\x1d\xd8\x41\x45\xec\xbf\xf7\xb6\x96\xc0\xd8\x43\x8d\x50\x64\x49\x42\x05\x6b\x66\xd4\xcc\xdc\xea\x6d\xb1\xf8\xb4\xce\x0e\x36\xae\xf0\x77\x12\xe5\xd4\x0c\x13\x79\xe8\xcb\xbf\x8b\xc8\x4e\x17\x47\x86\x6f\x7f\x1d\x01\x75\xf5\x32\x1e\x01\x75\xb8\x11\xc6\xbd\x93\x0d\xd7\xde\x53\x4a\x78\xe5\xd0\xab\xfc\xcb\x8a\xe5\x96\x53\x84\x29\x51\xfd\x3d\x0d\xa6\xa6\x26\xda\x35\x47\xe2\xb7\x46\xe3\xf1\x6e\x6e\x44\x8c\x81\x93\x88\xe2\x02\xc9\x22\xe8\xfe\xb7\xc0\x9b\x25\x35\xc5\x3d\x6d\x8a\x38\xa6\x52\xcf\x57\x2c\xdb\x3a\xe5\x3b\xcb\xaa\x52\xcb\xf1\x6b\xdc\xd5\xe6\xf4\x2c\xce\xc3\xf3\xa5\x43\x82\xb4\x21\x0b\x99\x8f\x0c\xcd\x42\x43\x33\x0a\x13\xd3\xb3\xb8\x1f\xca\xbc\xb6\xcb\xdf\x9c\x5d\x8f\x63\x6c\x2a\x68\xe6\x0f\x94\x5f\x40\xad\xc5\x80\x66\x97\xe5\xd8\xc1\x33\xcc\xe4\xcf\xff\x66\x1f\xcb\xca\x2a\x56\x2a\x8a\x6a\x03\x8c\x3f\xb1\x50\x9e\xea\x38\x0f\x13\x30\xf6\xd0\x32\xe5\x27\xc8\x37\xea\xac\xf4\x9e\xd7\xd7\xf8\xfe\xae\x7a\x33\xbc\x5f\x1d\x77\xf9\x1f\xb6\x5a\x63\xab\x3b\xae\xe3\x04\xd5\xda\x5b\xdc\xc0\x5a\xb0\xc5\x7b\xbd\x29\x51\x27\xbc\x37\x9b\xfc\xd9\xfc\x97\xdc\x59\xec\x1b\x4a\x91\x25\xcd\x78\x8c\x32\x8a\x9c\x7b\x54\x67\xa7\x0b\x60\x9a\x18\xe1\x68\x0e\x51\x4b\xb3\xf4\xac\xdc\x05\xfe\x9d\x32\x7b\xdb\xdb\x5c\x64\x07\x1b\xec\x97\x5a\x00\xef\xc7\xb8\x76\x99\x3e\x14\xb5\x8e\x57\x5b\x9f\x76\xae\xa9\x65\xfa\x91\xb4\x2e\x1d\x3e\xd3\xaa\x88\xf8\x73\x81\xbf\x7e\xc6\xf6\xaa\xc1\x45\xed\x55\x59\x63\x0d\xb6\xbf\x98\xfb\xdf\xa6\xc1\x7d\xed\x89\x6e\x16\x4c\x5f\xea\xcd\xf8\xe7\xbc\x28\xf8\x5d\xbe\xd4\x8b\x20\xfb\xff\x00\x00\x00\xff\xff\x92\x1b\x3d\xe8\xd0\x08\x00\x00")

func env_env() ([]byte, error) {
	return bindata_read(
		_env_env,
		"env/env",
	)
}

var _html_json_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x8f\x94\x30\x14\xc7\xcf\xf2\x57\x3c\x7b\x01\x92\x99\x36\xf1\xa0\xc6\x01\x62\xe2\x8f\x6c\x36\xea\x9a\xec\x78\xf0\x58\xdb\x37\x43\xdd\xd2\x62\x5f\x99\x04\x09\xff\xbb\x29\x0c\x6e\xf4\xb2\x27\x9a\xef\x7b\xf0\x3e\xef\x43\xab\xe7\xef\xef\xde\x1d\xbf\x7f\xfd\x00\x6d\xec\x6c\x93\x55\xe9\x01\x56\xba\x73\xcd\x7e\xb7\xfb\x1b\xe9\x88\xa5\x14\xa5\x6e\x32\x00\x80\xaa\xc3\x28\x41\xb5\x32\x10\xc6\x9a\x7d\x3b\x7e\xdc\xbf\x66\xd7\x52\x34\xd1\x62\x33\x4d\xfc\x98\x0e\xf3\x5c\x89\x35\x59\xab\xd6\xb8\x07\x68\x03\x9e\x6a\x26\xc4\xe0\xfa\x87\x33\x57\xbe\x13\x56\x8e\x83\x79\xfb\x82\xbf\xe2\x2f\x85\x36\x14\x85\x22\x5a\x43\xae\x88\x18\x04\xb4\x35\xa3\x38\x5a\xa4\x16\x31\x26\x1a\xb1\xe2\x54\x3f\xbc\x1e\x9b\xac\x22\x15\x4c\x1f\xd7\x29\x17\x19\x80\x64\xd7\x5b\xbc\x25\xef\xa0\x86\xdb\xfb\xbb\x2f\xbc\x4f\xb4\xc5\x34\xf1\x14\xce\x73\x79\xc8\x9e\xa5\x46\x2d\xa3\xdc\x5a\x28\x06\xe3\xce\xe6\x34\x16\x8f\xaf\xef\xc0\x0d\xd6\xee\x80\x01\x00\x2b\x0f\x59\x25\xb6\x51\x95\x36\x17\x50\x56\x12\xd5\x6c\x61\xdd\x2b\xef\xa2\x34\x0e\xc3\x26\xa3\x0f\xf8\x7f\x87\x46\x06\x56\x8e\x7b\xdf\x47\xe3\x1d\xd5\x6c\x5a\xfc\xbc\xc9\x13\x41\x3e\xb3\xa6\x12\x7d\xc0\xb4\xa0\x36\x97\x26\xdb\x36\x03\x0a\xea\x09\x67\xab\xaf\x9f\x94\x3e\xf1\x97\x71\x3b\xac\xc5\x81\xb0\xc8\x13\x43\xbe\x83\xd3\xe0\x54\x42\x28\xca\x69\x81\xbd\xea\xf6\x1a\x8b\xf2\x90\x25\x3f\xda\xab\xa1\x43\x17\xf9\xaf\x01\xc3\x78\x8f\x16\x55\xf4\xa1\xc8\xf9\xe3\x2e\x79\xc9\x8d\x73\x18\x6e\x8e\x9f\x3f\x41\xbd\xc8\xfc\x47\x91\xb8\xfe\x1e\xb1\xdc\xac\x3f\x01\x00\x00\xff\xff\x0a\xad\x3c\x7e\x69\x02\x00\x00")

func html_json_html() ([]byte, error) {
	return bindata_read(
		_html_json_html,
		"html/json.html",
	)
}

var _systemd_app_service = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x4f\x6f\xdb\x3c\x0c\xc6\xef\xfa\x14\x04\x7c\x7d\xdf\xa0\x7f\x90\xdd\x7c\xd8\x96\x6c\x0b\xd6\xa6\x45\x93\xae\x87\xa2\x07\xd5\xa6\x13\xa2\xb2\xe8\x89\x94\x3d\xa1\xf0\x77\x1f\xe4\x24\x58\xb7\x9e\x2c\xfe\x1e\x51\x92\xf9\x3c\x8f\xf7\x9e\xf4\xc9\x2c\x50\xaa\x40\x9d\x12\xfb\xf2\xf5\x75\xf6\xa6\x1c\x47\xf3\xb1\x51\x0c\xa5\x24\x71\xbc\x9b\xa9\x0d\x3b\xd4\x23\xf3\xa8\x03\x87\x97\xbf\x21\xb4\x49\x7e\xba\x7a\x26\x18\x7a\xaa\x10\x02\xd6\x24\xa7\xca\x98\xc7\xcd\x61\xf5\x64\x0a\xb8\xe6\x9a\x9a\x04\xba\x47\x41\xd0\x81\xa1\xb7\x2e\xa2\x80\xf5\x35\x44\x5f\x71\xdb\xa2\xd7\x2c\xb7\x40\x0d\x24\x8e\xb0\xb7\x3d\x9a\x02\x02\x76\x2c\x30\x90\xee\xc1\xb1\x0a\x70\x03\x0d\xb9\x63\xe7\x0e\x15\xac\x87\x6f\xdb\xed\x2d\x60\x08\x1c\x60\x7e\x76\x06\xcf\x58\xd9\x28\xb9\x99\x1b\xd0\xbd\x55\x53\x14\x85\x29\xae\xa8\x25\xbd\x5e\x5e\x5f\xdd\x7c\xfe\x5e\x92\x6f\xc8\x93\xa6\x23\x5e\xdf\x7c\x59\x5d\x2d\xcb\x0f\xf3\xf9\xe5\xdc\x6c\x53\x87\xa5\x50\xdb\x39\x34\xf7\x82\x21\xcf\x29\x7f\xbd\x6d\x71\x1c\xcd\xd7\xc0\xb1\xcb\x6c\x5a\x8c\xa3\x79\xe0\xf0\x42\x7e\xb7\xa0\x80\x95\x72\x48\xd3\x5c\x4f\xc5\x38\x9a\xa5\xef\x29\xb0\xcf\x7f\x58\x2e\x56\x77\xff\xca\x05\xbc\xdd\xb0\x5c\xff\x38\x2f\xa7\xe1\x9c\xbf\x57\x2e\x0e\xca\xc5\x7b\xe5\xf2\xa0\x5c\x9a\xe5\x2f\xac\x36\x6a\x83\xe6\x6b\x72\x11\x35\x3f\xfa\x0e\x65\x82\xd6\x0d\x36\x89\x31\xa6\x80\x0d\xb7\x08\x35\x89\x06\x7a\x8e\x39\x00\x02\xad\x4d\xe0\x59\x41\x62\xd7\x71\xd0\xa3\x5d\x7b\x1b\x6a\xf4\xe4\x77\x50\x4f\xcf\xa6\x1e\x65\x06\xab\x83\x4d\x95\xf5\x53\x47\x3e\x3d\xef\x87\x53\x18\xea\x98\x1d\x50\xce\x06\x45\xff\xe2\x79\xf0\xc0\x53\xd0\xfe\x83\x93\xdf\x1c\x0f\x3d\xec\x51\xde\x5e\x8c\x35\x3c\xa7\x7c\x7c\x80\x1e\x83\x10\xfb\x6c\xa5\x24\x51\x6c\xeb\x99\x29\xe0\x36\xb0\x62\xa5\x9b\x89\x94\x4d\x74\x6e\x82\xd4\x5b\xc5\x05\xe6\xfb\xa5\x4c\x28\x7f\xe0\xb6\xed\x8e\x60\xcd\x6b\x1c\x32\x25\x87\x3b\x94\x52\x43\xcc\x59\x5d\x79\x51\xeb\xdc\x93\x79\xb0\x5e\xb1\xfe\x94\xca\x36\x3a\xa5\xff\xa3\x60\x38\xa5\xfe\x77\x00\x00\x00\xff\xff\xd7\xc8\xe1\xc1\x43\x03\x00\x00")

func systemd_app_service() ([]byte, error) {
	return bindata_read(
		_systemd_app_service,
		"systemd/app.service",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"env/env": env_env,
	"html/json.html": html_json_html,
	"systemd/app.service": systemd_app_service,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"env": &_bintree_t{nil, map[string]*_bintree_t{
		"env": &_bintree_t{env_env, map[string]*_bintree_t{
		}},
	}},
	"html": &_bintree_t{nil, map[string]*_bintree_t{
		"json.html": &_bintree_t{html_json_html, map[string]*_bintree_t{
		}},
	}},
	"systemd": &_bintree_t{nil, map[string]*_bintree_t{
		"app.service": &_bintree_t{systemd_app_service, map[string]*_bintree_t{
		}},
	}},
}}
