// Code generated by go-bindata. DO NOT EDIT.
// sources:
// service/app.service
// service/env
// code/index.html
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceAppService = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6f\xdb\x3e\x0c\xc5\xef\xfa\x14\x04\x7c\xfd\xff\x8d\x14\x43\x76\xf3\x61\x5b\xb2\x2d\x58\x9b\x16\x4d\xda\x1e\x8a\x1e\x54\x9b\x76\x84\xda\xa2\x47\x52\xce\x84\xc2\xdf\x7d\x90\x13\x63\xed\x0e\x3b\xd9\xef\x47\x3f\x51\xe6\xe3\xe3\x9d\x77\xfa\x64\x56\x28\x25\xbb\x5e\x1d\xf9\xe2\xf5\x35\x7f\x23\xc7\xd1\x7c\xaa\x15\xb9\x90\x28\x2d\x35\xb9\x5a\x6e\x50\xcf\xcc\xa3\x1e\x89\x5f\xde\xc3\x2e\xca\xcf\xb6\xca\x05\x79\x70\x25\x02\x63\xe5\x64\x56\xc6\x3c\xee\x4e\x6f\x4f\x26\x83\x2b\xaa\x5c\x1d\x41\x0f\x28\x08\x7a\x24\x18\x6c\x1b\x50\xc0\xfa\x0a\x82\x2f\xa9\xeb\xd0\x6b\x2a\x77\xe0\x6a\x88\x14\xe0\x60\x07\x34\x19\x30\xf6\x24\x70\x74\x7a\x80\x96\x54\x80\x6a\xa8\x5d\x7b\x76\x36\xa8\x60\x3d\x7c\xdf\xef\x6f\x00\x99\x89\x61\xb9\x58\xc0\x33\x96\x36\x48\x32\x53\x0d\x7a\xb0\x6a\xb2\x2c\x33\x19\x5c\xba\xce\xe9\xd5\xfa\xea\xf2\xfa\xcb\x8f\xc2\xf9\xda\x79\xa7\x71\xe6\xdb\xeb\xaf\x9b\xcb\x75\xf1\x71\xb9\xfc\xb0\x34\xfb\xd8\x63\x21\xae\xeb\x5b\x34\x77\x82\x9c\x06\x95\x9e\xde\x76\x38\x8e\xe6\x1b\x53\xe8\x67\xd6\x24\x31\x8e\xe6\x81\xf8\xc5\xf9\x66\xe5\x18\x4b\x25\x8e\xd3\x70\x67\x31\x8e\x66\xed\x07\xc7\xe4\xd3\x7f\x16\xab\xcd\xed\xbf\xca\xeb\xed\x7d\xd1\x33\x55\xa1\x4c\xb1\xbc\x2b\xdd\xaf\x6f\x77\x9b\xeb\x6d\x31\x5c\xe4\x8b\x7c\x61\x32\xf8\xcb\x77\x51\x4c\x83\xbd\x30\xeb\x5f\x58\xee\xd4\xb2\xa6\x46\x49\x04\x4d\x57\xbf\x45\x99\xa0\x6d\x8f\x36\x8a\x31\x26\x83\x1d\x75\x08\x95\x13\x65\xf7\x1c\x52\x43\x81\xce\x46\xf0\xa4\x20\xa1\xef\x89\xf5\x1c\xdb\xc1\x72\x85\xde\xf9\x06\xaa\xe9\xe2\x6e\x40\xc9\x61\x73\x8a\xab\xb4\x7e\x72\xa4\xd3\xd3\xf7\x30\x2f\x45\x15\x52\x12\x4a\x29\xa8\xe0\x5f\x3c\x1d\x3d\xd0\xb4\x6f\xff\xc1\x9c\x3b\x85\x93\x87\x3c\xca\xdb\xc6\x58\xc1\x73\x4c\xc7\x33\x0c\xc8\xe2\xc8\xa7\x48\x25\x8a\x62\x57\xe5\x26\x83\x1b\x26\xc5\x52\x77\x13\x29\xea\xd0\xb6\x13\x74\x83\x55\x5c\x61\xea\x2f\x45\x44\xf9\x03\xf7\x5d\x7f\x06\x5b\xda\xe2\x31\x51\xd7\x62\x83\x52\x28\x87\xb4\xb3\x1b\x2f\x6a\xdb\xf6\xc9\x3c\x58\xaf\x58\x7d\x8e\x45\x17\x5a\x75\xff\x07\x41\x9e\x97\xff\x77\x00\x00\x00\xff\xff\xf7\x73\xf1\x65\x4a\x03\x00\x00")

func serviceAppServiceBytes() ([]byte, error) {
	return bindataRead(
		_serviceAppService,
		"service/app.service",
	)
}

func serviceAppService() (*asset, error) {
	bytes, err := serviceAppServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/app.service", size: 842, mode: os.FileMode(420), modTime: time.Unix(1669379573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceEnv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5f\x4f\x1b\xc7\x17\x7d\x9f\x4f\x71\x1f\x7e\x7e\xc4\x5e\xfe\xfc\xd2\x08\x6b\x1f\xd2\xb8\x55\x2b\x11\x29\x72\xe0\xa1\x42\x3c\x2c\xf6\x18\x56\xda\xdd\x49\x77\xc6\x21\x51\x14\x09\x52\xc0\x24\xaa\x63\x52\xe2\x18\x02\x24\xa4\x4d\x30\x55\x60\x71\xd5\x16\x83\xc1\xf6\x97\xf1\xec\xec\x7e\x8b\x6a\x76\xd6\x98\x56\x89\xd2\x87\x5a\x7e\xb1\xee\xb9\xf7\x9e\x73\xe6\xf8\xa6\xd3\x69\x10\xdb\xcf\xf9\xfa\xa1\xf8\xb0\x25\x1e\x9f\xa1\xe9\x3b\xcc\x60\x26\x71\x66\x50\xbf\xd0\x3b\x3d\xf7\x77\x5a\xe8\x1b\x42\x19\xe8\x30\x3c\xf2\x45\x52\x4b\x6a\xc9\x61\x34\x68\x3c\xe6\x95\x5f\xd0\x6d\xe2\xca\xfa\x75\x4d\xd3\x50\x1a\xf8\xca\x52\xe0\x9d\x06\xcd\x03\xfe\xe6\x0d\xba\x61\x59\x64\xe1\xa6\x4b\x28\xcd\x10\xdb\x30\x1d\xd0\x81\x38\x08\xc9\xdd\x7e\xed\x3d\xef\xd6\xc2\x95\xb2\x68\x7b\x68\x7a\x82\xcc\xc9\xbd\x41\x67\x83\x97\x5a\x7c\xad\xe1\x3f\xab\xf3\xb5\x13\x5e\x69\xa0\x3b\x2c\x4f\x8a\x0c\x00\x64\x6f\xa1\x20\x41\x5e\x83\xb7\xab\x12\x14\x8d\xf0\x5f\x96\x7a\xe7\x27\x28\x8b\x73\xc4\xcd\xc7\x38\x07\xf5\x17\xf0\xa3\x4d\xfe\xf8\x40\x6c\x7b\xbc\x5d\x45\x19\xd3\xc5\x39\x46\xdc\x07\xa0\xc3\xff\x1e\x66\xbe\xcd\x3e\x4a\x59\x64\x8e\xc6\x84\xaa\x0d\xbf\xec\xf1\xd6\x46\x9f\x53\xc6\x60\xc6\xac\x41\x71\x44\xac\xfb\xda\x7f\xf6\xfe\xd3\x86\xa8\xfa\xdf\x0d\x19\x1d\xd5\xae\xa1\x2b\x73\xf9\x7a\x59\xd4\x1b\x28\x33\x1b\x71\x64\x98\xb2\x41\xe3\x8b\x03\x7f\xad\xc9\xd7\xcb\x68\x8a\x62\xd7\x31\x6c\x0c\x3a\xb8\x84\x0c\x10\xfc\x78\x55\xec\x2d\xa1\xdb\x06\xa5\x0b\x52\xa7\x5c\x3f\x9a\xcc\x11\x7b\x80\x38\xaa\x89\xc3\xfd\x70\x7b\x15\xdd\x9c\x37\x5c\x8a\x99\xdc\x52\x64\x85\xeb\xf6\xec\xd8\xe7\x5d\xd3\xc1\x7e\x40\xbf\xb7\x86\x12\xdf\x0d\x25\xec\xa1\x44\x3e\x69\x91\xb9\xab\xe4\x55\x97\x38\x7a\x22\x5a\x75\x18\x1e\xa7\xa6\x85\x1d\x06\x23\xe3\xd8\x75\x89\x0b\xa3\xe3\x0b\x86\xeb\xc0\xd8\xb8\xe9\x14\x08\x9a\xc0\xf7\xb0\x05\x3a\x8c\x29\x63\xb3\x38\x6f\xd2\xbe\xa9\xd1\x8f\xff\xca\x51\xf1\xc7\xcf\xfc\xa2\x0a\x79\x5c\x30\x8a\x16\x83\x69\x6d\x68\xf8\xff\x33\x7d\x83\xb5\x7f\x7a\x77\xa3\xc8\xe6\x41\x47\x69\x08\xcf\x37\x03\xef\x9d\xb8\xd8\xe0\x47\x9b\x7e\xed\x24\xac\x76\xa7\x45\xfd\xa7\x19\x34\x39\x39\x01\x3a\x5c\x1b\x93\x49\xd6\xe2\x50\x1c\xbc\xf5\x77\xbb\x2a\x3e\x7d\x09\x93\xd8\xbe\x6b\x19\x2c\xca\xc5\xd5\x7a\xaf\x1d\xd5\x3f\x12\x32\x17\x53\x52\x74\x73\x98\xa6\x58\xdc\x7b\xd9\xaa\xde\xc1\x7f\xf2\x2b\xff\xad\x1a\x07\xe4\xab\xfb\x0c\x3b\xd4\x24\xf2\xdf\x92\x9c\x67\xb6\x25\xc1\xc7\x15\xff\xf0\x6d\xe0\x75\xc3\x9a\x17\xfe\xd0\x0e\x4b\x65\xff\x65\x83\x3f\xdd\x0b\xda\x6d\x35\x07\x65\xb1\x45\x8c\x38\xff\xcc\x2d\xe2\xab\xfc\x79\x65\x33\x2c\x55\x82\xce\x99\xa8\xfe\x28\x0e\xf7\x79\xa5\x39\x50\x91\xcc\x60\xcb\xb4\x4d\x26\xd5\xf0\xe6\x7e\xd0\x39\x53\x68\xbe\xb6\x1a\xbe\x7a\x11\xa3\x27\x70\x21\x8a\xd3\xc3\x84\x44\x55\x7e\xff\x38\x2a\x6b\xce\xcd\xcb\x67\x4a\x3c\x42\x6a\x7b\x74\x51\x72\x10\xee\x6e\xf9\x8b\x4b\xc1\x9f\xcb\x7e\x6b\x5d\xe9\xed\x5b\xa9\x00\xd1\xc5\x69\x3f\x17\x1f\xb6\xf8\x76\xc7\xdf\x2b\xa1\xaf\x8d\x7b\x66\x8e\x38\x91\x96\x4f\x5a\x98\x2a\x28\x54\xd2\xcc\x91\x28\xdf\xd2\x1b\xbe\xd3\xe0\xbb\x8b\x68\xca\xb5\x40\x7d\x74\x48\xd1\x68\x89\x24\xee\xbd\x0e\xb7\x56\xd4\x45\xf8\xfc\x63\x0d\x16\xc5\x03\x22\x49\xbd\xd3\xa7\xbd\x8b\xbd\x3e\xff\xa9\xbb\xd2\xf4\x99\xcb\xb3\xa7\xaa\xe2\xd5\x72\xfc\xac\x3b\x8b\xfc\x5d\x5d\x7e\x1b\x15\xe0\x65\x99\x10\xb8\xf5\x25\xba\x65\xdc\x37\xed\xa2\x0d\x3a\x8c\xc8\x90\xaa\x26\xc5\x3f\x68\x1e\xf3\xce\x72\xc4\x5f\x87\x54\x31\x1a\x7f\x09\x51\x31\x53\x2a\xfe\x4d\xd8\x54\xfb\x5f\x01\x00\x00\xff\xff\x98\xad\x40\x8e\xe9\x05\x00\x00")

func serviceEnvBytes() ([]byte, error) {
	return bindataRead(
		_serviceEnv,
		"service/env",
	)
}

func serviceEnv() (*asset, error) {
	bytes, err := serviceEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/env", size: 1513, mode: os.FileMode(420), modTime: time.Unix(1669380808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codeIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x61\x6f\xe3\x36\x0f\xfe\xde\x5f\xa1\xd7\xef\x00\x27\x43\x2c\x27\xb7\xe2\x56\xb8\x71\xb0\xed\xd6\x61\x3d\xf4\xae\xc3\xda\x62\x1b\xb6\x01\x55\x24\xc6\x56\x2b\x53\x3e\x49\x76\x9a\x06\xf9\xef\x83\x6c\xa7\x71\xd2\x16\x1b\xd0\x7c\x91\x45\x52\x8f\x1e\x91\x0f\x89\x4c\xff\xf7\xe3\xe5\x87\xeb\x3f\x7e\x39\x23\xb9\x2b\xd4\xec\x68\xea\x17\xa2\x18\x66\x69\xf0\x98\x47\x3f\x33\xb4\x81\xb7\x02\x13\xb3\x23\x42\x08\x99\x16\xe0\x18\xe1\x39\x33\x16\x5c\x1a\xdc\x5c\xff\x14\x9d\x04\x9d\xcb\x49\xa7\x60\xb6\x5e\xd3\x6b\xff\xb1\xd9\x4c\xe3\xd6\xd2\x3b\x98\x3b\x57\x46\xf0\xa5\x92\x75\x1a\xfc\x1e\xdd\x7c\x1f\x7d\xd0\x45\xc9\x9c\x9c\x2b\x08\x08\xd7\xe8\x00\x5d\x1a\x9c\x9f\xa5\x20\x32\x08\xfa\x27\x91\x15\x90\x06\xb5\x84\x65\xa9\x8d\xeb\x05\x2f\xa5\x70\x79\x2a\xa0\x96\x1c\xa2\x66\x33\x22\x12\xa5\x93\x4c\x45\x96\x33\x05\xe9\x84\x8e\xb7\x50\x4a\xe2\x3d\x31\xa0\xd2\xc0\xba\x95\x02\x9b\x03\xb8\x80\xe4\x06\x16\x69\xe0\xb9\xd9\x24\x8e\x2b\x2c\xef\x33\xca\x75\x11\x2b\xb6\xaa\xe4\x77\xef\xe8\x7b\x7a\x12\x0b\x69\x5d\xcc\xad\x6d\x8d\x94\x5b\xbb\xc5\xb4\xdc\xc8\xd2\xb5\x1b\xff\xab\x99\x21\x96\x15\xa5\x82\x8f\x56\x23\x49\xc9\xc7\xab\xcb\xcf\xb4\xf4\x19\x1b\xac\xd7\xd4\x1b\x37\x9b\xe1\xe9\x5e\xbc\x60\x8e\x6d\x23\xad\x33\x12\x33\xb9\x58\x0d\x76\x28\x23\x82\x95\x52\x23\x12\xfc\xe5\x82\xee\xe8\x34\xee\x5f\x3c\x6d\xde\xb3\x23\x31\xd7\x62\x45\xd6\x4f\x5b\xff\x2b\x99\x10\x12\xb3\x84\x8c\x4f\xf7\xec\x05\x33\x99\xc4\x67\xe6\x1c\x64\x96\xbb\x84\x4c\xc6\xe3\x3a\xdf\x77\x35\x59\x6e\x3d\xcb\x7d\x8f\xae\xc1\x2c\x94\x5e\x26\x24\x97\x42\x00\xee\xbc\x9b\xa7\xaf\xff\x37\x19\x8c\xb8\x16\x70\xc0\xf0\x75\xdc\x57\xc8\x6c\xb6\x99\x68\x1f\x3f\x8d\x5b\xa1\x4e\xfd\xeb\x67\x47\x53\x21\x6b\x22\x45\x1a\xec\x2e\x0c\x66\xd3\x58\xc8\xda\x87\x76\x31\x6d\x12\x89\x35\x7c\xa7\x00\x2e\x90\xce\xb5\x76\x7e\x45\x70\x31\xbb\x63\x0f\xb1\x92\x73\x1b\x73\x25\xcb\xb9\x66\x46\xd0\x3b\x1b\xbf\xa3\x63\x3a\x99\xf4\x6c\x85\x44\x7a\x67\xfd\x1d\xdb\xd2\xbc\x08\xff\x5c\x60\xdf\xd2\xf7\xad\xc0\x5a\x71\xfd\x07\x8c\xd7\x29\x16\x1a\x19\xd7\x11\x08\xe9\xb4\x89\xc7\xf4\x9b\x63\x3a\x89\x0b\x89\x71\x6d\x63\xa5\x99\x00\xf3\x3a\xcf\x56\x3f\xc6\x37\xa8\x01\xca\x35\x2e\x64\x36\xd8\xd5\xa8\x64\x2e\xb7\x09\x59\x93\xda\x26\x24\x7c\x1b\x95\x90\x6c\x46\x4f\xc0\x61\x6d\x63\x54\x36\x4c\xc8\x9a\xd5\x4c\x2a\x36\x57\x70\xc1\x30\xab\x58\x06\xfe\xc2\xf0\xeb\x30\x09\x1f\xf3\x88\x63\xb8\xe9\x8e\x6d\x3b\x68\x29\x51\xe8\x25\xfd\xd4\x5c\x75\x86\xb5\x34\x1a\x0b\x40\x47\xd2\x9e\xb8\x32\x70\xbf\x69\x73\x0f\xe6\xc6\xa8\x84\x2c\x2a\xe4\x4e\x6a\x24\x83\x65\x63\x3c\x17\x23\xa2\xd8\x1c\xd4\xf0\x40\x8f\x06\x5c\x65\x90\xdc\xfa\xee\x4c\x1c\x3c\xb8\xf8\x8e\xd5\xac\x4d\xd5\xe9\x76\x06\x56\x6e\x11\x9d\x8c\xbe\x5a\x03\x7a\x81\xdd\xfc\x7a\xee\x47\x9a\x46\x40\x37\xb8\xdd\x43\xb3\xa0\x16\xff\xc2\xb3\xeb\x5d\x66\xa1\x21\xfa\x86\x14\x87\x7b\x98\x9b\xfd\x6e\x92\x85\x9f\xa1\x57\xcd\x3b\xec\xe0\x8d\x85\xf4\x6c\xe3\x36\x91\xdd\xf2\x89\x49\xec\x34\x16\x0e\x4f\x6f\x87\x9b\xdb\x5e\xc7\x76\xd5\x3b\xed\x2b\x6d\xf0\xa7\x17\x40\x87\xde\x2e\xb4\x60\x12\xc3\xbf\x47\xbd\x62\xf5\xab\xd3\x55\xbd\xe5\x45\xbb\x23\xdc\x00\x73\x30\x10\x9a\x57\x3e\xb3\xf4\x4b\x05\x66\x75\x05\x0a\xb8\xd3\x66\x10\xf4\xe6\x4e\x30\x1c\x1d\x64\xbd\x66\xaa\x82\xa4\x99\xc3\xa3\x3d\x87\xea\x64\x98\x90\xf0\xce\x6a\x0c\xf7\xbd\x2e\x87\x02\x92\xb0\xb6\x91\x60\xe6\xfe\xc0\xb9\xd0\xe8\xae\xe4\xa3\x3f\x3a\x39\x2e\x1f\x0e\xbc\x4a\x22\x7c\xae\x8a\x39\x18\xdf\x4c\xcf\x90\x8d\xae\x50\x80\x68\xe9\x4b\x8d\x09\x59\x30\x65\x61\x3f\xc8\x72\xa3\x95\xfa\x01\x56\x1a\xc5\x05\xb3\xee\x42\x22\xbc\x18\x68\x80\x89\x4b\x54\xab\x17\x9d\x8e\xcd\x5b\x9a\xc7\x3b\xfb\xb6\xbd\x0e\xda\x8c\x09\x71\x56\x03\xba\x0b\x69\x1d\x20\x98\x41\x68\xc0\xca\x47\x08\x47\x04\xea\x46\xcd\xb3\xe7\x55\x52\x9a\x33\xff\x04\x6a\xc0\x0f\xa0\xc1\xb0\x43\x3e\xea\xcd\x9f\xb8\xf9\xff\xf1\x4f\x00\x00\x00\xff\xff\xe6\xe1\xf7\xdb\x8f\x08\x00\x00")

func codeIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_codeIndexHtml,
		"code/index.html",
	)
}

func codeIndexHtml() (*asset, error) {
	bytes, err := codeIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "code/index.html", size: 2191, mode: os.FileMode(420), modTime: time.Unix(1669389597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/app.service": serviceAppService,
	"service/env": serviceEnv,
	"code/index.html": codeIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"code": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{codeIndexHtml, map[string]*bintree{}},
	}},
	"service": &bintree{nil, map[string]*bintree{
		"app.service": &bintree{serviceAppService, map[string]*bintree{}},
		"env": &bintree{serviceEnv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

